> ~~Need a "sizeof()" function for pycparser AST - use ctypes.sizeof() with a dictionary / function
  mapping from pycparser.c_ast.Decl to ctypes.c_*~~
  > ~~bool, byte, char, char_p, double, float, int, long, longdouble, short, ubyte,
    uint, ulong, ushort, void_p, wchar, wchar_p~~
  > ~~missing any types?~~
> ~~Change Assignment / var_pass to use lhs and rhs to cover all assignments
  (not just assignments with an ID on the lhs)~~
> ~~Add ParamList--Decl pass, writing out (&var) and (var) at beginning of function.~~
> ~~Add Decl pass (only inside functions), writing out (&var) and (RHS)~~
> ~~Add UnaryOp pass, writing out (&LHS) and (RHS)~~
> ~~Trace listener should never call fifo.read() on a literal constant - use ast_ops.sizeof()
  to determine how much data to read.~~
> Trace listener should maintain a dictionary mapping from symbol table ID to a function to
  call when the beginning of the FIFO contains data corresponding to this ID (i.e. we just
  read the ID from the FIFO) - cleaner than a chain of if-elif-elif...
> Figure out what to do with += and -= (calculate new values from within trace listener?)
> Re-use code between passes (e.g. SARing the __DEBUG_ID which happens in all passes)

Future:
> Debugging asm()?
> Instead of pickle.dump() use struct.pack() to convert python symbol table for
  use by an efficient trace listener written in C.
> Data flow visualization (graph data structure)
> Trace analysis tools / algorithms, trace data structures / database
  > Hash map for symbol table
    > Linked list of trace entries / program events
    > Adjacency list in each linked list with pointers to the set of program events
      which affected the results of this event.
    > Adjacency list in each linked list with pointers to the set of program events
      which this event affected the results of.
    > Int index for what event number this occured
> A preprocessing tool which expands typeof() and sizeof() (exists already?)

